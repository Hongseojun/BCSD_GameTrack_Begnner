using System.Collections;
using System.Collections.Generic;
using UnityEngine;
----------------------------------------------------(콘솔창에 메세지 띄워보기)
public class NewBehaviourScript : MonoBehaviour
{
    void Start()
    {
        Debug.Log("Hello Unity");
    }
}
----------------------------------------------------(유니티 생명주기)
public class LifeCycle : MonoBehaviour
{
    //Awake는 게임이 시작되고 가장 먼저 실행되는 함수이다.
    //한 번만 실행된다.
    void Awake()
    {
        Debug.Log("플레이어 데이터가 준비되었습니다.");
    }

    //OnEnable은 초기화와 물리업데이트 사이에 위치하게 된다.
    //게임 오브젝트를 활성화시키는 함수이다.
    //활성화/비활성화시 때마다 실행된다.
    void OnEnable()
    {
        Debug.Log("플레이어가 로그인 했습니다.");
    }

    //Start는 업데이트 시작 직전에 최초로 실행되는 함수이다.
    //한 번만 실행된다.
    void Start()
    {
        Debug.Log("사냥 장비를 챙겼습니다.");
    }

    //FixedUpdate는 게임에서 물리연산을 업데이트 하는 함수이다.
    //물리연산이 시작되기 전 실행된다.
    //주기적으로 여러번 실행된다.(고정된 실행 주기로 CPU를 많이 쓴다.)(1초에 약 50회 실행)
    void FixedUpdate()
    {
        Debug.Log("이동~");
    }

    //Update는 물리연산 관련 제외 게임 로직을 업데이트하는 함수이다.
    //주기적으로 여러번 실행된다.(환경에 따라 실행주기가 바뀔 수 있다.)
    //ex) 프레임률 60이면 1초에 60번 실행됨
    void Update()
    {
        Debug.Log("몬스터 사냥");
    }

    //LateUpdate는 모든 업데이트가 끝난 후 마지막으로 호출되는 함수이다.
    //카메라 이동이나 로직의 후처리 등의 과정이 담긴다.
    void LateUpdate()
    {
        Debug.Log("경험치 획득");
    }

    //Ondisable은 오브젝트가 비활성화될 때 실행된다.
    void OnDisable()
    {
        Debug.Log("플레이어 로그아웃");
    }

    //OnDestroy는 게임 내에서 오브젝트가 삭제되기 직전 실행된다.
    void OnDestroy()
    {
        Debug.Log("플레이어 데이터를 해제하였습니다.");
    }
}
----------------------------------------------------(키보드, 마우스 입력받기)
public class LifeCycle : MonoBehaviour
{
    void Update()
    {
        //입력받기(키보드 + 마우스)
        if (Input.anyKeyDown) //키보드나 마우스를 누름
            Debug.Log("플레이어가 아무 키를 눌렀습니다.");
        if (Input.anyKey) //키보드나 마우스를 누르고 있음
            Debug.Log("플레이어가 아무 키를 누르고 있습니다.");

        //키보드 입력받기
        //Enter는 없고 Return이 대신한다.
        //나머지 다른 키는 다 그냥 쓰면 됨
        if (Input.GetKeyDown(KeyCode.Return)) //키보드를 한 번 누름
            Debug.Log("아이템을 구입하였습니다.");
        if (Input.GetKey(KeyCode.LeftArrow)) //키보드를 누르고 있음
            Debug.Log("왼쪽으로 이동 중");
        if (Input.GetKeyUp(KeyCode.RightArrow)) //키보드를 눌렀다가 땜
            Debug.Log("오른쪽으로 이동을 멈추었습니다.");

        //마우스 입력받기
        //0과 1값이 있는데, 0은 마우스 좌클릭. 1은 마우스 우클릭이다.
        if (Input.GetMouseButtonDown(0)) //마우스를 한 번 누름
            Debug.Log("미사일 발사!");
        if (Input.GetMouseButton(0)) //마우스를 누르고 있음
            Debug.Log("차징...");
        if (Input.GetMouseButtonUp(0)) //마우스를 눌렀다가 땜
            Debug.Log("슈퍼 미사일 발사!");

        //유니티 안에 내장된 버튼으로 입력받기
        //아래 예시의 "Jump"는 유니티 안에서 스페이스바로 설정되어있다.
        //버튼 설정은 Edit의 Project Settings 안의 Input Manager에서 설정 가능
        //버튼의 추가, 변경 등은 자유롭다.
        if (Input.GetButtonDown("Jump"))
            Debug.Log("점프!");
        if (Input.GetButton("Jump"))
            Debug.Log("점프 기모으는중...");
        if (Input.GetButtonUp("Jump"))
            Debug.Log("슈퍼 점프!");
    }
}
----------------------------------------------------(횡 이동, 종 이동 연습(출력만))
public class Move : MonoBehaviour
{
    void Update()
    {
        //버튼으로 횡 이동 하기
        //GetAxisRaw를 통해 왼쪽으로 이동하는지 오른쪽으로 이동하는지 출력됨.
        //왼쪽은 -1, 오른쪽은 1, 둘 다 동시에 누르면 0이 출력된다.
        if (Input.GetButton("Horizontal"))
        {
            Debug.Log("횡 이동 중..." + Input.GetAxisRaw("Horizontal"));
        }

        //버튼으로 종 이동하기
        //아래쪽은 -1, 위쪽은 1, 둘 다 동시에 누르면 0이 출력된다.
        if (Input.GetButton("Vertical"))
        {
            Debug.Log("종 이동 중..." + Input.GetAxisRaw("Vertical"));
        }

    }
}
----------------------------------------------------(횡 이동, 종 이동 연습2(값 입력x))
public class Move : MonoBehaviour
{
    //Transform은 오브젝트 형태, 위치에 대한 기본 컴포넌트로 어떤 오브젝트라도 기본적으로 가지고 있다.
    //따로 변수를 만들 필요 없이 유니티에 내장되어있다.(오브젝트에 포함됨)
    //Translate는 입력받은 벡터 값을 현재 위치에 더하는 함수이다.
    //Vector2는 2차원, Vector3은 3차원이다.
    //Start 함수에 넣으면 게임이 시작할 때 위치가 고정된다.(위치 초기화 용도)
    //Update 함수에 넣으면 계속 넣은 값씩 이동시킨다.
    void Start()
    {
        //int number = 4;과 같은 값은 스칼라 값이므로 사용하지 못한다.
        Vector2 vec = new Vector2(0, 0); //벡터 값을 사용해야 함.
        transform.Translate(vec);
    }
    void Update()
    {
        Vector2 vec = new Vector2(0, 0.1f); //0.1씩 y축으로 계속 올라가게 된다.
        transform.Translate(vec);
    }
}
----------------------------------------------------(횡 이동, 종 이동 실전)
public class LifeCycle : MonoBehaviour
{
    //Vector의 X값과 Y값을 입력받아 오브젝트를 이동시킨다.
    void Update()
    {
        Vector2 vec = new Vector2(Input.GetAxis("Horizontal"), Input.GetAxis("Vertical"));
        transform.Translate(vec);
    }
}
----------------------------------------------------(목표 지점으로 이동시키기)
public class Move : MonoBehaviour
{
    Vector2 target = new Vector2(8, 1.5f);
    void Update()
    {
        //1. MoveTowards
        //위에서 선언된 target의 위치까지 1의 속도로 이동시키는 함수이다.
        transform.position = Vector2.MoveTowards(transform.position, target, 1f);

        //2. SmoothDamp
        //MoveTowards와 유사하지만 좀 더 부드럽게 움직일 수 있게 해준다.
        //다른 방향으로의 속도도 조절 가능하다.
        Vector2 velo = Vector2.zero;
        transform.position = Vector2.SmoothDamp(transform.position, target, ref velo, 0.1f);
        

        //3. Lerp
        //선형 보간 이동이다. 부드럽게 움직일 수 있게 해준다.
        transform.position = Vector2.Lerp(transform.position, target, 0.05f);

        //4. SLerp
        //구면 선형 보간 이동이다. 호를 그리며 이동할 수 있게 해준다.(포물선 이동)
        //Vector2에서는 사용이 불가능하고 Vector3를 사용해야 한다.
        transform.position = Vector3.Slerp(transform.position, target, 1f);
    }
}
----------------------------------------------------(deltaTime)
    //Time.deltaTime이란 이전 프레임의 완료까지 걸린 시간이다. 다시 말해 1프레임에 사용된 시간이다.
    //값은 프레임이 적으면 크고, 프레임이 많으면 작다.
    //컴퓨터의 사양에 따라 게임 속 오브젝트의 성능이 달라지는 것을 방지하기 위해서 사용한다.
    //Time.deltaTime 사용법
    //1. Translate: 벡터에 곱하기
    //ex) transform.Translate(Ved*Time.deltaTime);
    //2. Vector 함수: 시간 매개변수에 곱하기
    //ex) Vector3.Lerp(vec2, vec2, T*Time.deltaTime);
----------------------------------------------------(힘을 사용해서 구체 이동)
public class LifeCycle : MonoBehaviour
{
    //Rigidbody란 물리효과를 사용하기 위해 만들어진 컴포넌트이다.
    //유니티에 내장된 물리엔진이다.
    Rigidbody rigid;
    void Start()
    {
        //1. GetComponent로 속도 설정해서 움직이기
        //GetComponent<T>는 자신의 T타입 컴포넌트를 가져온다.
        //velocity는 현재 이동 속도이다.
        //업데이트를 하고싶으면 FixedUpdate에 넣어야 한다.
        rigid = GetComponent<Rigidbody>();
        rigid.velocity = Vector3.right;
        

        //2. AddForce로 힘을 가해 이동하기
        //Forcemode는 힘을 주는 방식이다.(가속, 무게 반영)
        rigid.AddForce(Vector3.up*5, ForceMode.Impulse);

        //3. 회전력
        //AddTorque(vec)는 vec방향을 축으로 회전력이 생기게 만든다.
        rigid.AddTorque(Vector3.back);
    }

    void FixedUpdate()
    {
        //AddForce의 힘 방향으로 계속 속도 velocity가 증가한다.
        //스페이스 바를 누르면 구체가 힘을 받아 위로 이동한다.
        if (Input.GetButtonDown("Jump"))
            rigid.AddForce(Vector3.up*25, ForceMode.Impulse);

        //키보드의 wasd키로 구체에 힘을 주며 밀듯이 자연스럽게 이동시킬 수 있다.
        Vector3 vec = new Vector3(Input.GetAxisRaw("Horizontal"), 0, Input.GetAxisRaw("Vertical"));
        rigid.AddForce(vec, ForceMode.Impulse);
    }
}
----------------------------------------------------(충돌 시 이벤트(색 바꾸기))
public class LifeCycle : MonoBehaviour
{
    //MeshRenderer를 통해서 오브젝트의 재질에 접근한다.
    MeshRenderer mesh;
    Material mat;

    void Start()
    {
        mesh = GetComponent<MeshRenderer>();
        mat = mesh.material;
    }

    //OnCollisionEnter는 물리적 충돌이 시작될 때 호출되는 함수이다.
    //OnCollisionStay는 물리적 충돌이 진행되는 중에 사용되는 함수이다.
    //OnCollisionExit는 물리적 충돌이 끝났을 때 호출되는 함수이다.
    private void OnCollisionEnter(Collision collision)
    {
        //구체가 플레이어가 조종하는 구체에 닿았을 때 검은 색으로 바뀌게 해준다.
        if (collision.gameObject.name == "My Ball")
            mat.color = new Color(0,0,0);
    }
    /*
    private void OnCollisionStay(Collision collision)
    {

    }
    private void OnCollisionExit(Collision collision)
    {

    }
    */
}
----------------------------------------------------(충돌 시 이벤트(트리거))
    //TrggerStay는 콜라이더가 계속 충돌하고 있을 때 호출된다.
    void OnTriggerStay(Collider other)
    {
        //플레이어의 구체와 큐브가 충돌중일 때 위로 힘을 주어 올려보내는 함수이다.
        if (other.name == "cube")
            rigid.AddForce(Vector3.up * 2, ForceMode.Impulse);
    }
----------------------------------------------------(끝)
