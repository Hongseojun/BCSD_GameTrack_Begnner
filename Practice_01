using UnityEngine;

public class NewBehaviourScript : MonoBehaviour
{
    // 01. 변수: 변수와 데이
    //------------------------------------------------------(변수의 선언방식)
    //정수(int) 타입의 변수 선언
    private int value01;
    //같은 타입의 변수 여러개를 ,를 사용해 쉽게 선언 가능
    private int value02, value03, value04;
    //변수 초기화(필수)
    private int value05 = 10;
    //여러개 동시 초기화
    private int value06 = 10, value07 = 20, value08 = 30;

    private void Awake()
    {
        value01 = 1;
        value02 = 2;
        value03 = 3;
        value04 = 4;
    }
    //------------------------------------------------------(변수 종류와 선언 위치)
    private int currentHP = 10; //클래스 멤버 변수
    private readonly int maxHP = 100; //읽기 전용 변수
    private const int maxMP = 100; //상수

    public NewBehaviourScript()
    {
        maxHP = 200; //읽기 전용 변수는 초기화, 생성자에서 수정 가능.
    }

    private void Awake()
    {
        int currentMP = 50; //지역변수(함수 내부에서만 사용 가능)

        currentHP = 35; //currentHP 변수에 100 저장
        //maxHP = 200; //읽기전용 변수는 함수에서는 수정 불가
        //maxMP = 200; //상수 변수 또한 수정 불가

        //Console View에 데이터 출력(읽기전용, 상수 변수도 사용은 가능)
        Debug.Log(currentHP);
        Debug.Log(currentMP);
        Debug.Log(maxHP);
    }
    private void Update()
    {
        //currentMP = 100; //지역변수는 다른 함수에서는 사용 불가
    }
    //------------------------------------------------------(메모리와 변수)
        public class GameSystems : MonoBehaviour
    {
        private void Awake()
        {
            //Player 클래스 변수 선언
            Player player;

            //Hierarchy View에 있는 "Playerobject" 게임오브젝트의
            //"Player"컴포넌트 주소 값 정보를 얻어온다.

            player = GameObject.Find("Playerobject").GetComponent<Player>();
            //스택 메모리 영역에 선언된 player변수를 통해 힙 메모리 영역에
            //저장되어 있는 실제 데이터에 접근 후 playerName을 "고박사"로 바꿈.
            player.playerName = "고박사";
            player.TakeDamage(10);
            //컴포넌트를 적용하지 않고 new를 사용하여 직접 메모리 할당 가능.

        }
    }
     // 02. 변수: 기본 데이터 형식
     //------------------------------------------------------(숫자 형식-정수)
     private void Awake()
     {
        sbyte byteValue = -128; //-128~127
        byte ubyteValue = 255; // 0~255
        short shortValue = -32768; //-32768~32767
        ushort ushortValue = 65535; //0~65535
        int intValue = -2147483648; //-2147483648~2147483647
        uint uintValue = 4294967295; //0~4294967295
        long longValue = -922337203685477508; //-922337203685477508~922337203685477507
        ulong ulongValue = 18446744073709551615; //0~18446744073709551615
        char charValue = 'k';

        Debug.Log("byte Data : " + byteValue);
        Debug.Log("ubyte Data : " + ubyteValue);
        Debug.Log("short Data : " + shortValue);
        Debug.Log("ushort Data : " + ushortValue);
        Debug.Log("int Data : " + intValue);
        Debug.Log("uint Data : " + uintValue);
        Debug.Log("long Data : " + longValue);
        Debug.Log("uong Data : " + ulongValue);
        Debug.Log("char Data : " + charValue);
     }
    //------------------------------------------------------(숫자 형식-소수)
    private void Awake()
    {
        float floatValue01 = 3.141592653589793238462643383279f; //7자리 표현
        float floatValue02 = 31.41592653589793238462643383279f; //7자리 표현
        double doubleValue = 3.141592653589793238462643383279; //15자리 표현
        decimal  decimalValue = 3.141592653589793238462643383279m; //29자리 표현

        Debug.Log("float Data: " + floatValue01);
        Debug.Log("float Data: " + floatValue02);
        Debug.Log("double Data: " + doubleValue);
        Debug.Log("decimal Data: " + decimalValue);
    }
    //------------------------------------------------------(논리 형식)
    private void Awake()
    {
        string stringValue = "안녕하세요, 홍서준입니다.";
        bool boolValue = true;

        Debug.Log("strinf Data: " + stringValue);
        Debug.Log("bool Data: " + boolValue);
    }
    //------------------------------------------------------(오브젝트 형식-박싱)
    private void Awake()
    {
        //박싱(데이터 저장)
        object valueInt = 31; 
        object valueFloat = 3.14159265358979f;
        object valueString = "객체지향 프로그래밍";
        object valueBool = false;

        //언박싱(데이터 사용)
        Debug.Log("정수: " + valueInt);
        Debug.Log("실수: " + valueFloat);
        Debug.Log("문자열: " + valueString);
        Debug.Log("논리: " + valueBool);
    }
    //03. 변수: 데이터형 변환
    //------------------------------------------------------(정수 변환-크기)
    private void Awake()
    {
        sbyte sbyteValue = 10;
        int intValue = (int)sbyteValue;

        Debug.Log("sbyteValue: " + sbyteValue);
        Debug.Log("intValue: " + intValue);

        //sbyte변수가 저장할 수 있는 최대치인 127보다 높은 값을 넣었기 때문에 오버플로우 발생
        intValue = 130; 
        sbyteValue = (sbyte)intValue;

        Debug.Log("sbyteValue: " + sbyteValue);
        Debug.Log("intValue: " + intValue);
    }
    //------------------------------------------------------(정수 변환-부호)
    private void Awake()
    {
        sbyte sbyteValue = 31;
        byte byteValue = (byte)sbyteValue;

        Debug.Log("sbyteValue: " + sbyteValue);
        Debug.Log("byteValue: " + byteValue);

        //부호가 있는 경우(음수)
        sbyteValue = -31;
        byteValue = (byte)sbyteValue;

        Debug.Log("sbyteValue: " + sbyteValue);
        Debug.Log("byteValue: " + byteValue);
        
        //최댓값보다 클 때
        byteValue = 200;
        sbyteValue = (sbyte)byteValue;

        Debug.Log("sbyteValue: " + sbyteValue);
        Debug.Log("byteValue: " + byteValue);
    }
    //------------------------------------------------------(실수 변환-크기)
    private void Awake()
    {
        float floatValue = 69.6875f;
        double doubleValue = (double)floatValue;

        Debug.Log("floatValue: " + floatValue);
        Debug.Log("doubleValue: " +  doubleValue);

        floatValue = 0.1f;
        doubleValue = (double)floatValue;

        Debug.Log("floatValue: " + floatValue);
        Debug.Log("doubleValue: " + doubleValue);
    }
    //------------------------------------------------------(실수-정수 변환)
    private void Awake()
    {
        float floatValue = 0.9f;
        int intValue = (int)floatValue;

        Debug.Log("floatValue: " + floatValue);
        Debug.Log("intValue: " + intValue);

        floatValue = 1.1f;
        intValue = (int)floatValue;

        Debug.Log("floatValue: " + floatValue);
        Debug.Log("intValue: " + intValue);
    }
    //------------------------------------------------------(문자열-숫자 변환 1)
    private void Awake()
    {
        int intValue = 10;
        float floatValue = 12.3456f;
        string stringValue = "33"; //문자열에 숫자가 아닌 데이터가 있으면 숫자로 바꿀 수 없다.

        Debug.Log("intValue: " + intValue);
        Debug.Log("floatValue: " + floatValue);
        Debug.Log("stringValue: " + stringValue);

        intValue = int.Parse(stringValue);
        stringValue = "33.4567"; //"33.4567"과 같은 실수는 int로 변환이 안된다.
        floatValue = float.Parse(stringValue);

        Debug.Log("intValue: " + intValue);
        Debug.Log("floatValue: " + floatValue);
        Debug.Log("stringValue: " + stringValue);
    }
    //------------------------------------------------------(문자열-숫자 변환 2)
    private void Awake()
    {
        string stringValue = "숫자가 아닙니다.";
        int intValue = 10;

        bool isConversion = int.TryParse(stringValue, out intValue);
        if (isConversion == true)
        {
            Debug.Log("stringValue: " + stringValue);
            Debug.Log("intlue: " + intValue);
        }
        else
        {
            Debug.Log("stringValue 변수에 들어있는 내용이 숫자가 아니라 실패함");
        }
    }
    
    //------------------------------------------------------(문자열-숫자 변환 3)
    private void Awake()
    {
        string stringValue = "초기화";
        int intValue = 33;
        float floatValue = 12.3456f;

        Debug.Log("stringValue: " + stringValue);

        //정수 -> 문자열
        stringValue = intValue.ToString();
        Debug.Log("stringValue: " + stringValue);

        //실수 -> 문자열
        stringValue = floatValue.ToString();
        Debug.Log("stringValue: " + stringValue);
    }
    //04.변수 : 상수, 열거형, Nullable, var
    //------------------------------------------------------(상수 선언)
    private void Awake()
    {
        const int PlayerIdle = 0; //const는 변수를 상수로 선언함으로써 그 값을 고정한다.
        const int PlayerMove = 1; //Readonly로 상수를 선언해도 되는데, 이 때는 생성자 함수에서
        const int PlayerAttack = 2; //다른 값으로 바꿀 수 있다.(const에서는 안됨)

        int PlayerState = PlayerAttack;
        
        switch (PlayerState)
        {
            case PlayerIdle:
                Debug.Log("플레이어 상태: 대기");
                break;
            case PlayerMove:
                Debug.Log("플레이어 상태: 이동");
                break;
            case PlayerAttack:
                Debug.Log("플레이어 상태: 공격");
                break;
        }
    }
    //------------------------------------------------------(열거형 상수선언)
    enum PlayerState{Idle, Move, Attack}//열거형 enum을 사용하였다.
    //enum 내에 저장된 변수는 상수로 선언이 되며, 따로 값을 정하지 않으면
    //0,1,2...순서로 값이 부여된다.
    private void Awake()
    {
        PlayerState PlayerState = PlayerState.Idle;

        switch (PlayerState)
        {
            case PlayerState.Idle:
                Debug.Log("플레이어 상태: 대기");
                break;
            case PlayerState.Move:
                Debug.Log("플레이어 상태: 이동");
                break;
            case PlayerState.Attack:
                Debug.Log("플레이어 상태: 공격");
                break;
        }
    }
    //------------------------------------------------------(Nullable과 var)
    private void Awake()
    {
        int? intValue;

        intValue = null;
        Debug.Log(intValue.HasValue);

        intValue = 30;
        Debug.Log(intValue.HasValue);
        Debug.Log(intValue.Value);

        var Valueint = 33;
        var Valuefloat = 33.4567f;
        var Valuestring = "문자열";

        Debug.Log("정수: " + Valueint);
        Debug.Log("실수: " + Valuefloat);
        Debug.Log("문자열: " + Valuestring);
    }
    //05.문자열 다루기
    //------------------------------------------------------(문자열-숫자 변환 1)
    
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
    //------------------------------------------------------(문자열-숫자 변환 1)
                    
}
